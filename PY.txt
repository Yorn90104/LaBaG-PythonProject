@.\main.py
from GUI import Window
win = Window("啦八機", 450, 800) #先初始化 Tkinter 才能創建 ImageTk
from src.Game import P, PlayLaBaG, JsonLaBaG
from src.element import (
    Gss, Hhh, Hentai, Handsun, Kachu, Rrr,
    BG, SuperBG, GreenBG, KachuBG,
    QST, SuperQST, GreenQST, KachuQST, 
    Title, SuperTitle, GreenTitle, KachuTitle, 
    SuperPOP, GreenPOP, KachuPOP,
    image_dict, music,
    SuperCircle, 
    back, BeginPIC, AgainPIC, SB,
    super_hhh, 
    green_wei, GreenLeft, GreenMid, GreenRight,
    pikachu
)
from src.Sheet import Sheet

Sheet.GetData() #獲取啦八機試算表的資料

Games = {
    "Game": PlayLaBaG(),
    "Json_Game" : JsonLaBaG() #.json檔案模擬用
}  
Game = Games["Game"] #預設
P.Dict["A"].picture = Gss
P.Dict["B"].picture = Hhh
P.Dict["C"].picture = Hentai
P.Dict["D"].picture = Handsun
P.Dict["E"].picture = Kachu
P.Dict["F"].picture = Rrr

win.save_icon_use(image_dict, "Superhhh")
#創建 Screen(frame & canvas)
win.setup_frame_and_canvas("Home", BG) #首頁
win.setup_frame_and_canvas("Game", BG) #遊戲畫面
win.setup_frame_and_canvas("End", BG) #結算畫面

win.temp_files = music.temp_files # 連結臨時檔案 list


#region Home Screen

win.load_picture("Home", SuperCircle, 50, 130, "SuperCircle")

def into_game():
    """進入Game畫面"""
    global Game
    Game = Games["Game"]
    Game.Name = win.get_input("Name")
    if Game.Name:
        win.update_by_tag("Game", "PlayerName", f"玩家名：{Game.Name}")
        print(f"玩家名：{Game.Name}")
    else :
        win.update_by_tag("Game", "PlayerName", f"")
        print(f"玩家名：無")

    Game.history_score = Sheet.GetScore(Game.Name)
    win.unbind('<Return>') # 解除綁定ENTER
    BeginAble()
    Game.Reset()
    init_Game_screen_item()
    bgm_on_off()
    win.switch_frame("Home", "Game") #切換畫面

win.Canva("Home").tag_bind("SuperCircle", "<Button-1>", lambda event :into_game()) #綁定 SuperCircle 圖片被點擊->進入遊戲
win.bind('<Return>', lambda event :into_game()) #綁定ENTER進入遊戲

win.input_box(
    "Home", 
    "Name", #Name 輸入盒
    "",
    225, 550,
    18, 15
)

win.add_text(
    "Home",
    "作者IG：fan._.yuuu",
    225, 100,
    30,
    "#00FFFF",
    "fanyu"
)

win.add_text(
    "Home",
    "點擊上方圖片(或 ENTER )\n       進入遊戲 >>>>>",
    225, 500,
    15,
    "#FFFFAA",
    "click" 
)

win.add_text(
    "Home",
    "輸入你的稱呼",
    225, 575,
    12,
    "white",
    "hint"
)

def into_json():
    """進入Json_Game畫面"""
    import os
    #判斷路徑是否為空、是否存在、是否為.json檔
    json_path = win.open_file()
    if json_path is not None and os.path.exists(json_path) and os.path.splitext(json_path)[1] == ".json":
        global Game
        Game = Games["Json_Game"]
        win.Canva("Game").itemconfig("PlayerName", text =  "正在使用 .json檔案模擬")
        print(f"使用 .json檔案模擬中")
        Game.setup_path(f"{json_path}")

        BeginAble()
        Game.Reset()
        init_Game_screen_item()
        bgm_on_off()
        win.switch_frame("Home", "Game") #切換畫面
    else:
        win.message_box(
            f"無效的路徑:\n{json_path}",
            )
        print(f"無效的路徑:\n{json_path}")

win.txt_button(
    "toJson",
    into_json,
    "Home",
    "使用 .json 檔案模擬遊戲",
    10, 2,
    110, 770,
    12,
    "black", "yellow"
)

def rank_subwindow():
    """排行榜子視窗"""
    win.Button("toRank").config(state='disabled') # toRank Button 停用
    win.Button("toRank").config(text="資料載入中")
    Sheet.GetData() #獲取資料
    win.setup_subwindow("Rank", 450, 800, BG)

    win.SubWindow("Rank").add_text(
        "排行榜",
        225, 50,
        30,
        "yellow",
        "Title"
        )
    
    
    for index, data in enumerate(list(Sheet.RankedData().items())[:10]): # 顯示前 10 名
        win.SubWindow("Rank").add_text(
            f"{index + 1 :<2}. {data[0]:<10s} : {data[1] :>8,}",
            50, 125 + index * 50,
            16,
            "white",
            f"rank_{index}",
            "w"
            )
    
    def off_rank():
        """關閉排行榜子視窗"""
        win.Button("toRank").config(state='normal')
        win.Button("toRank").config(text="查看排行榜")
        win.SubWindow("Rank").destroy()
    win.SubWindow("Rank").txt_button(
        "off_window",
        off_rank,
        "關閉視窗",
        100, 50,
        225, 700,
        16
        )
    win.SubWindow("Rank").protocol("WM_DELETE_WINDOW", off_rank) #綁定關閉視窗
    

win.txt_button(
    "toRank",
    rank_subwindow,
    "Home",
    "查看排行榜",
    10, 2,
    225, 50,
    12,
    "black", "white"
)
#endregion


#region Game Screen
def init_Game_screen_item():
    """初始化 Game 畫面物件"""
    win.update_by_tag("Game", "BG", BG)
    win.update_by_tag("Game", "LP", QST)
    win.update_by_tag("Game", "MP", QST)
    win.update_by_tag("Game", "RP", QST)
    win.update_by_tag("Game", "Title", Title)
    win.update_by_tag("Game", "MarginScore", f"")
    win.update_by_tag("Game", "Score", f"目前分數：{Game.score}")
    win.update_by_tag("Game", "Times", f"剩餘次數：{Game.times - Game.played}")
    win.update_by_tag("Game", "history_score", f"歷史最高分數：{Game.history_score}")
    win.update_by_tag("Game", "mod_1", f"")
    win.update_by_tag("Game", "mod_2", f"")
    win.update_by_tag("Game", "gss", f"咖波累積數：{Game.GssNum}")

def Game_to_Home():
    """返回首頁"""
    win.reset_input_box("Name", Game.Name)
    win.unbind('<space>')  # 取消space鍵的綁定
    win.bind('<Return>', lambda event :into_game())
    bgm_on_off(game_running=False) #關閉音樂
    win.switch_frame("Game", "Home")
    print("返回首頁")

win.image_button(
    win,
    Game_to_Home,
    "Game",
    back,
    18, 18
)

win.load_picture("Game" , Title , 0 , 25 , "Title")
win.load_picture("Game" , QST, 0, 250 , "LP")
win.load_picture("Game" , QST, 150, 250 , "MP")
win.load_picture("Game" , QST, 300, 250 , "RP")

def BeginAble():
    """可 Begin"""
    win.bind('<space>', lambda event: Begin()) # 綁定Space鍵
    win.Button("Begin").config(state='normal') # Begin Button 啟用

def BeginUnable() :
      """不可 Begin"""
      win.unbind('<space>')  # 取消space鍵的綁定
      win.Button("Begin").config(state='disabled')  # Begin Button 停用

def Begin():
    """開始"""  
    def resetQST():
        """根據模式重置QST圖片"""
        match Game.NowMode():
            case "SuperHHH":
                qstpic = SuperQST
            case "GreenWei":
                qstpic = GreenQST
            case "PiKaChu":
                qstpic = KachuQST
            case _:
                qstpic = QST

        win.update_by_tag("Game", "LP", qstpic)
        win.update_by_tag("Game", "MP", qstpic)
        win.update_by_tag("Game", "RP", qstpic)

        win.update_by_tag("Game", "MarginScore", "") #邊際分數文字清除
        win.update_by_tag("Game", "mod_2", "")

    def change_pic_per500ms():
        """每隔0.5秒改圖片"""
        win.after(500, lambda: win.update_by_tag("Game", "LP", Game.Ps[0].picture))
        win.after(1000, lambda: win.update_by_tag("Game", "MP", Game.Ps[1].picture))
        win.after(1500, lambda: win.update_by_tag("Game", "RP", Game.Ps[2].picture))
        # Ding 音效
        win.after(500, lambda: music.play_sound("Ding"))
        win.after(1000, lambda: music.play_sound("Ding"))
        win.after(1500, lambda: music.play_sound("Ding"))

    def picture_and_sound():
        match Game.NowMode():
            case "Normal":
                return
            
            case "SuperHHH":
                if Game.Ps[0].code == "B":
                    win.update_by_tag("Game", "LP" , super_hhh)
                if Game.Ps[1].code == "B":
                    win.update_by_tag("Game", "MP" , super_hhh)
                if Game.Ps[2].code == "B":
                    win.update_by_tag("Game", "RP" , super_hhh)
                music.play_sound("SuperUP")
            
            case "GreenWei":
                if all(p.code == "A" for p in Game.Ps):
                    win.update_by_tag("Game", "LP" , GreenLeft)
                    win.update_by_tag("Game", "MP" , GreenMid)
                    win.update_by_tag("Game", "RP" , GreenRight)
                elif any(p.code == "A" for p in Game.Ps):
                    if Game.Ps[0].code == "A":
                        win.update_by_tag("Game", "LP" , green_wei)
                    if Game.Ps[1].code == "A":
                        win.update_by_tag("Game", "MP" , green_wei)
                    if Game.Ps[2].code == "A":
                        win.update_by_tag("Game", "RP" , green_wei)
                else:
                    win.update_by_tag("Game", "LP" , green_wei)
                    win.update_by_tag("Game", "MP" , green_wei)
                    win.update_by_tag("Game", "RP" , green_wei)
                music.play_sound("GreenUP")
            case "PiKaChu":
                music.switch_music("KachuMusic")
                if Game.Ps[0].code == "E":
                    win.update_by_tag("Game", "LP" , pikachu)
                if Game.Ps[1].code == "E":
                    win.update_by_tag("Game", "MP" , pikachu)
                if Game.Ps[2].code == "E":
                    win.update_by_tag("Game", "RP" , pikachu)

    def screen_pop_music():
        """畫面、彈出圖片、音樂"""
        match Game.NowMode():
            case "Normal":
                win.update_by_tag("Game", "BG", BG)
                win.update_by_tag("Game", "Title", Title)
                win.update_by_tag("Game", "mod_1", f"")
                music.switch_music("bgm")

            case "SuperHHH":
                win.image_button("pop", lambda: win.delete_canvas_tag("Game", "pop"), "Game", SuperPOP, 225 , 400, "flat", 0)
                win.update_by_tag("Game", "BG", SuperBG)
                win.update_by_tag("Game", "Title", SuperTitle)
                win.Canva("Game").itemconfig("mod_1", text = f"超級阿禾剩餘次數:{Game.SuperTimes}次", fill = "#FF00FF")
                music.switch_music("SuperMusic")
                if Game.double_score > 0:
                    win.Canva("Game").itemconfig("mod_2", text = f"(超級阿禾加倍分:{Game.double_score})", fill = "yellow")

            case "GreenWei":
                win.image_button("pop", lambda: win.delete_canvas_tag("Game", "pop"), "Game", GreenPOP, 225 , 400, "flat", 0)
                win.update_by_tag("Game", "BG", GreenBG)
                win.update_by_tag("Game", "Title", GreenTitle)
                win.Canva("Game").itemconfig("mod_1", text =  f"綠光阿瑋剩餘次數:{Game.GreenTimes}次", fill = "#00FF00")
                music.switch_music("GreenMusic")

            case "PiKaChu":
                win.image_button("pop", lambda: win.delete_canvas_tag("Game", "pop"), "Game", KachuPOP, 225 , 400, "flat", 0)
                win.update_by_tag("Game", "BG", KachuBG)
                win.update_by_tag("Game", "Title", KachuTitle)
                win.Canva("Game").itemconfig("mod_1", text = f"已觸發 {Game.kachu_times} 次皮卡丘充電", fill = "#FFFF00")
           
    def result_txt():
        """顯示結果文字"""
        win.update_by_tag("Game", "MarginScore", f"+{Game.margin_score}")
        win.update_by_tag("Game", "Score", f"目前分數：{Game.score}")
        win.update_by_tag("Game", "Times", f"剩餘次數：{Game.times - Game.played}")
        win.update_by_tag("Game", "gss", f"咖波累積數：{Game.GssNum}")
        match Game.NowMode():
            case "SuperHHH":
                win.Canva("Game").itemconfig("mod_1", text = f"超級阿禾剩餘次數:{Game.SuperTimes}次", fill = "#FF00FF")
            case "GreenWei":
                win.Canva("Game").itemconfig("mod_1", text =  f"綠光阿瑋剩餘次數:{Game.GreenTimes}次", fill = "#00FF00")


    #Main
    win.delete_canvas_tag("Game", "pop")
    BeginUnable()
    resetQST()
    Game.Logic()
    change_pic_per500ms()
    win.after(3000, result_txt)
    if not Game.GameRunning():
        Game.GameOver()
        Sheet.CommitScore(Game.Name, Game.score)
        win.after(3500, Game_over_to_End)
        return
    if Game.ModtoScreen:
        win.after(2800, picture_and_sound)
        win.after(3500, screen_pop_music)
    win.after(3500, BeginAble)
    return

#開始按紐
win.image_button(
    "Begin",
    Begin,
    "Game",
    BeginPIC,
    225, 575
)

win.add_text(
    "Game",
    "",
    5, 50,
    15,
    "white",
    "PlayerName", #Game.Name
    "w"
)

win.add_text(
    "Game" ,
    "" ,
    225 , 478 ,
    16 ,
    "yellow" ,
    "MarginScore" # Game.margin_score
)

win.add_text(
    "Game" ,
    "" ,
    225 , 500 ,
    16 ,
    "white" ,
    "Score" #Game.score
)

win.add_text(
    "Game",
    "",
    225, 525,
    16,
    "white",
    "Times" #Game.times - Game.played
)

win.add_text(
    "Game" ,
    "" ,
    5, 775 ,
    16 ,
    "#FFBF00",
    "history_score", #Game.history_score
    "w" #靠左對齊
)


def bgm_on_off(game_running: bool= True) :
    """音樂開 & 關"""
    match Game.NowMode():
        case "SuperHHH":
            file_name = "SuperMusic"
        case "GreenWei":
            file_name = "GreenMusic"
        case "PiKaChu":
            file_name = "KachuMusic"
        case _:
            file_name = "bgm"
    
    #關
    if music.bgm_playing or not game_running:
        music.stop_music()
        win.Button("music").config(text="關", bg="#C0C0C0") 
        print("BGM已停止")
    #開
    else :
        music.play_music(file_name) 
        win.Button("music").config(text="開", bg="#00FF00")
        print("BGM已開啟")

win.txt_button(
    "music",
    bgm_on_off,
    "Game",
    "關",
    33, 33,
    415, 765,
    14,
    "black",
    "#C0C0C0"
)

#特殊模式顯示次數文字
win.add_text(
    "Game",
    "" ,
    225 , 650 ,
    16 ,
    "white",
    "mod_1",
) 

win.add_text(
    "Game",
    "" ,
    225 , 460 ,
    10 ,
    "white",
    "mod_2",
)

win.add_text(
    "Game",
    f"咖波累積數：{Game.GssNum}" ,
    445 , 50 ,
    14 ,
    "#00FF00",
    "gss",
    "e"
)


#endregion

#region End Screen
def Game_over_to_End():
    bgm_on_off(Game.GameRunning())
    music.play_sound("Ding")
    print("切換至結束畫面")
    win.update_by_tag("End", "PlayerName", f"{Game.Name}")
    win.update_by_tag("End","over", "遊戲結束！") 
    win.update_by_tag("End","final_score", f"最終分數：{Game.score}")  # 最終分數顯示
    win.update_by_tag("End","history_score", f"歷史最高分數：{Game.history_score}")
    win.switch_frame("Game", "End")
    

def game_again():
    """再玩一次遊戲"""
    BeginAble()
    Game.Reset()
    init_Game_screen_item()
    bgm_on_off()
    win.switch_frame("End", "Game")

win.add_text(
    "End",
    "",
    225, 175,
    22,
    "skyblue",
    "PlayerName", #Game.Name
)

win.add_text(
    "End" ,
    "遊戲結束！" ,
    225 , 260 ,
    42 ,
    "white" ,
    "over"
)

win.add_text(
    "End" ,
    "" ,
    225 , 325 ,
    32 ,
    "#FF0000" ,
    "final_score" #Game.score
)

win.add_text(
    "End" ,
    f"歷史最高分數：{Game.history_score}" ,
    225, 450 ,
    16 ,
    "#FFBF00" ,
    "history_score" #Game.history_score
)

win.image_button(
    "Again",
    game_again,
    "End",
    AgainPIC,
    225, 400
)

def save_json():
    """保存.json檔案"""
    if isinstance(Game, JsonLaBaG):
        print(f"此為json檔模擬模式 無法再次保存")
        win.message_text(
                2000,
                "End",
                f"此為json檔模擬模式 無法再次保存",
                225, 730
            )     
        return

    import os
    import json
    from datetime import datetime
    # 確保目錄存在
    output_dir = "C:\\JsonLaBaG\\"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    # 使用時間戳作為部分文件名
    timestamp = datetime.now().strftime("%Y%m%d")
    filename = f"{output_dir}{Game.score}_{timestamp}.json"
    try: 
        with open(filename, "w", encoding="utf-8") as file:
            json.dump(Game.AllData, file, indent=4)
            print(f"保存成功: {filename}")

            win.message_text(
                2000,
                "End",
                f"已成功保存至: {filename}",
                225, 730
            )
    except Exception as e:
        print(f"無法保存: {e}")
        win.message_box(
                f"無法保存: {e}",
            )

win.txt_button(
    "save_json",
    save_json,
    "End",
    "保存本次紀錄(.json)",
    10, 2,
    225, 700,
    12,
    "black", "#00FF00"
    
)

win.load_picture("End" , SB, 0, 500, "SB")
#endregion


win.first_window("Home")
win.mainloop()

@.\Target.py
#目標分數
from random import randint
import math
from src.Sheet import Sheet
from src.LaBaG import LaBaG

class TargetLaBaG(LaBaG):
    def __init__(self):
        super().__init__()
        delattr(self, "kachu_times")
        self.superS = 0
        self.greenS = 0
        self.kachuS = 0
    
    def Reset(self):
        super().Reset()
        self.superS = 0
        self.greenS = 0
        self.kachuS = 0
                    
    def JudgeMode(self):
        """判斷模式"""
        if not self.GameRunning():
            #關掉其他模式
            self.SuperHHH = False
            self.GreenWei = False

            #判斷皮卡丘充電
            if any(p.code == "E" for p in self.Ps) :
                self.PiKaChu = True
                self.played -= 5
                self.kachuS += 1
                self.ModtoScreen = True
            else:
                self.PiKaChu = False
            return
        
        match self.NowMode():
            case "Normal" | "PiKaChu":
                #判斷超級阿禾
                hhh_appear = any(p.code == "B" for p in self.Ps) #判斷是否有任何阿禾
                if self.SuperNum <= self.SuperRate and hhh_appear:
                    self.SuperHHH = True
                    self.SuperTimes += 6
                    self.superS += 1
                    if self.PiKaChu:
                        self.PiKaChu = False

                    self.ModtoScreen = True

                    #超級阿禾加倍
                    if all(p.code == "B" for p in self.Ps):
                        self.double_score = int(round(self.score / 2)) * self.score_time
                        self.score += self.double_score
                    return
                
                #判斷綠光阿瑋
                gss_all = all(p.code == "A" for p in self.Ps) #判斷是否有出現並全部咖波
                if self.GreenNum <= self.GreenRate and gss_all :
                    self.GreenWei = True
                    self.GreenTimes += 2
                    self.greenS += 1
                    if self.PiKaChu:
                        self.PiKaChu = False
                    
                    self.ModtoScreen = True
                    return

                elif self.GssNum >= 20 : #咖波累積數達到20
                    self.GreenWei = True
                    self.GreenTimes += 2
                    self.greenS += 1
                    self.GssNum = 0
                    if self.PiKaChu:
                        self.PiKaChu = False
                    
                    self.ModtoScreen = True
                    return
            case "SuperHHH":
                self.SuperTimes -= 1

                if all(p.code == "B" for p in self.Ps):
                    self.SuperTimes += 2
                if self.SuperTimes <= 0 : #超級阿禾次數用完
                    self.SuperHHH = False
                    self.JudgeMode() #判斷是否可再進入特殊模式
                    self.ModtoScreen = True

                return
            
            case "GreenWei":
                self.GreenTimes -= 1
                if all(p.code == "A" for p in self.Ps):
                    self.GreenTimes += 1
                if self.GreenTimes <= 0 : #綠光阿瑋次數用完
                    self.GreenWei = False
                    self.JudgeMode() #判斷是否可再進入特殊模式
                    self.ModtoScreen = True
                
                return
            
while True:   
    try:
        target = int (input("請輸入目標分數"))
        if target > 0:
            break
        else:
            print("目標分數必須大於 0")
    except ValueError as e:
        print(f"請輸入有效的數字: {e}")

Game = TargetLaBaG()

recent_max = 0

i = 0
while True :
    i += 1
    if i < 10 :
        LOG = 2
    else:
        LOG = int (round(math.log10(i)) + 2)
    Game.Logic()

    print(f"第{i : {LOG}}次 分數：{Game.score : 8} ({Game.superS : 2} 次 超級阿禾 )({Game.greenS : 2} 次 綠光阿瑋 )({Game.kachuS : 2} 次  皮卡丘充電)【目前最大值：{recent_max}】")
    # 檢查是否達到目標
    if Game.score >= target:
        break  # 如果達到目標，則退出迴圈
    elif Game.score > recent_max:
        recent_max = Game.score
        if recent_max >= 1000000:
            Sheet.CommitScore('模擬測試最高分', recent_max)
        
print (f"第{i: {LOG}}次達成：{Game.score : 8} ({Game.superS : 2} 次 超級阿禾 )({Game.greenS : 2} 次 綠光阿瑋 )({Game.kachuS : 2} 次  皮卡丘充電)")  




@.\TargetJson.py
#產生目標分數的隨機數 json 檔
from random import randint
import math
import os
from datetime import datetime
import json

from src.Sheet import Sheet
from src.LaBaG import LaBaG

while True:   
    try:
        target = int (input("請輸入目標分數"))
        if target > 0:
            break
        else:
            print("目標分數必須大於 0")
    except ValueError as e:
        print(f"請輸入有效的數字: {e}")

Game = LaBaG()

recent_max = 0
recent_total = 0

i = 0
while True :
    Game.Logic()

    i += 1
    recent_total = (recent_total + Game.score) % 1000000000000000

    if Game.score > recent_max:
        recent_max = Game.score
    print(f"第{i : {2 if i < 10 else int (round(math.log10(i)) + 2)}}次 分數：{Game.score : 8}【目前最大值：{recent_max}】【目前平均值：{recent_total / i % 1000000000000000 :.2f}】")

    # 檢查是否達到目標
    if Game.score >= target:
        break  # 如果達到目標，則退出迴圈
    

if Game.score > 1000000:
    Sheet.CommitScore('模擬測試最高分', Game.score)

# 確保目錄存在
output_dir = "C:\\JsonLaBaG\\"
os.makedirs(output_dir, exist_ok=True)
# 使用時間戳作為部分文件名
timestamp = datetime.now().strftime("%Y%m%d")

with open(f"{output_dir}{Game.score}_{timestamp}.json", "w", encoding="utf-8") as file:
    json.dump(Game.AllData, file, indent=4)

        
     

            

@.\test.py
import tkinter as tk
from tkinter import filedialog

root = tk.Tk()
root.title("")
root.geometry('200x200')

def show():
    file_path = filedialog.askopenfilename()   # 選擇檔案後回傳檔案路徑與名稱
    print(file_path)                           # 印出路徑

# Button 設定 command 參數，點擊按鈕時執行 show 函式
btn = tk.Button(root,
                text='開啟檔案',
                font=('Arial',20,'bold'),
                command=show
              )
btn.pack()

root.mainloop()

@.\GUI\yieldb64.py
import os
import base64

#產生 base64 音訊與圖像
asset_dir_items = os.listdir(".\\Asset")

images = list()
sounds = list()

def sort_item(dir_lsit:list):
    for item in dir_lsit:
        item_path = os.path.join(".\\Asset", item)
        _, extension = os.path.splitext(item_path) # 使用 splitext 分離文件名與副檔名
        if extension == ".jpg" or extension == ".png" or extension == ".ico":
            images.append(item)
        elif extension == ".wav":
            sounds.append(item)

def encode_image(files: list):
    """產生base64編碼的圖像字典檔"""
    image_dict = dict()
    for file in files:
        with open(f".\\Asset\\{file}", mode = "rb") as f :
            image_b64 = base64.b64encode(f.read())
        image_dict[file.split(".")[0]] = image_b64
    with open((f".\\src\\imageb64.py"), mode = "w") as f:
        f.write("image_dict =")
        f.write(image_dict.__repr__())

def encode_wav(files: list):
    """產生base64編碼的音訊字典檔"""
    sounds = dict()
    for file in files:
        with open(f'.\\Asset\\{file}', mode = 'rb') as f:
            sound_b64 = base64.b64encode(f.read())
        sounds[file.split('.')[0]] = sound_b64
    with open(f'.\\src\\soundb64.py', mode='w') as f:
        f.write("wav_dict =")
        f.write(sounds.__repr__())

sort_item(asset_dir_items)

encode_image(images)
encode_wav(sounds)


@.\GUI\__init__.py
import logging
from typing import Union
import tkinter as tk
from tkinter import messagebox, filedialog
from PIL import Image, ImageTk
import base64
from io import BytesIO
import os
import wave
import tempfile
from pygame import mixer

# 設置基本日誌配置
logging.basicConfig(
    level=logging.DEBUG,  # 設置最低日誌級別（DEBUG, INFO, WARNING, ERROR, CRITICAL）
    format='%(asctime)s - %(levelname)s - %(message)s',  # 設置日誌格式
    handlers=[
        logging.StreamHandler()  # 只输出到控制台
    ]
)

class BaseWindow():
    """基本視窗類"""
    def __init__(self, title: str = None, width: int = 300, height: int = 300):
        self.window_title = title
        self.width = width
        self.height = height

        self.__frame_dict = dict()
        self.__canvas_dict = dict()
        self.__button_dict = dict()
        self.__entry_dict = dict()
        self.__subwindow_dict = dict()
    
    def Canva(self, canvas_name: str= None) -> tk.Canvas:
        "使用 Tkinter.Canvas 相關操作"
        if canvas_name in self.__canvas_dict:
            return self.__canvas_dict[canvas_name]
        else:
            raise KeyError(f"無法從 {type(self).__name__}.__canvas_dict 找到名為 {canvas_name} 的canvas")

    def Frame(self, frame_name: str= None) -> tk.Frame:
        "使用 Tkinter.Frame 相關操作"
        if frame_name in self.__frame_dict:
            return self.__frame_dict[frame_name]
        else:
            raise KeyError(f"無法從 {type(self).__name__}.__frame_dict 找到名為 {frame_name} 的frame")

    def Button(self, button_name: str= None) -> tk.Button:
        "使用 Tkinter.Button 相關操作"
        if button_name in self.__button_dict:
            return self.__button_dict[button_name]
        else:
            raise KeyError(f"無法從 {type(self).__name__}.__button_dict 找到名為 {button_name} 的button")
        
    def Entry(self, entry_name: str= None) -> tk.Entry:
        """使用 Tkinter.Entry 相關操作"""
        if entry_name in self.__entry_dict:
            return self.__entry_dict[entry_name]
        else:
            raise KeyError(f"無法從 {type(self).__name__}.__entry_dict 找到名為 {entry_name} 的entry")
    
    def SubWindow(self, window_name: str = None) -> "SubWindow": #延遲解析
        """使用 SubWindow (Tkinter.Toplevel) 相關操作"""
        if window_name in self.__subwindow_dict:
            return self.__subwindow_dict[window_name]
        else:
            raise KeyError(f"無法從 {type(self).__name__}._subwindow_dict 找到名為 {window_name} 的subwindow")
    
    def setup_frame_and_canvas(self, name,  BG_pic: ImageTk.PhotoImage = None):
        """創建 & 設置畫面(畫面名稱, 背景圖片)"""
        Frame = tk.Frame(self, width= self.width, height= self.height, bg='lightblue')
        Canvas = tk.Canvas(Frame, width= self.width, height= self.height)
        Canvas.pack(fill="both", expand=True)
        Canvas.create_image(0, 0, image = BG_pic, anchor="nw", tag= "BG")
        self.__frame_dict[name] = Frame
        self.__canvas_dict[name] = Canvas

    def switch_frame(self, frame1_name: str, frame2_name: str):
        """切換畫面(畫面1 to 畫面2)"""
        self.Frame(frame1_name).pack_forget()
        self.Frame(frame2_name).pack(fill='both', expand=True)

    def first_window(self, frame_name: str):
        """顯示首個畫面"""
        self.Frame(frame_name).pack(fill='both', expand=True)

    def load_picture(self, canvas_name: str = None, img: ImageTk.PhotoImage = None, x: int = 0, y: int = 0 , tg: str = ""):
        """加載新的圖片並放在CANVA上 (畫面 , 照片, 水平座標, 垂直座標, 標記)"""
        self.Canva(canvas_name).create_image(x, y, image = img, anchor = "nw" , tag = tg)
    
    def add_text(self, canvas_name: str = None, txt: str = "", x: int = 0, y: int = 0, size: int = 12, color: str = "white" , tg: str = "", align: str = "center"):
        """添加粗體文字(畫面, 文字, 水平位置, 垂直位置, 大小, 顏色, 標記, 對齊方式[東南西北])"""
        self.Canva(canvas_name).create_text(
            x, y,
            text = txt ,
            font = ("Arial", size , "bold") ,
            fill = color ,
            tag = tg,
            anchor = align
        )

    def update_by_tag(self, canvas_name: str = None, tg: str = "", new_item: Union[str, ImageTk.PhotoImage, None] = None) -> None:
        """根據標記(tag)更換 CANVA 上的 物件 (畫面, 標記, 新物件)"""
        canva = self.Canva(canvas_name)

        if isinstance(new_item, str):
            canva.itemconfig(tg, text=new_item)
        elif isinstance(new_item, ImageTk.PhotoImage):
            canva.itemconfig(tg, image=new_item)
        elif new_item is not None:
            raise TypeError(f"不支援的類型: {type(new_item)}，請傳入 str 或 ImageTk.PhotoImage")

    def delete_canvas_tag(self, canvas_name: str = None, tg: str = ""):
        """根據標記刪除CANVA上的物件 (畫面, 標記)"""
        self.Canva(canvas_name).delete(tg)

    def message_box(self, message: str = ""):
        """顯示訊息框"""
        messagebox.showinfo(self.window_title, message)
        
    def image_button(self, button_name: str, CMD, canvas_name: str = None, img: ImageTk.PhotoImage = None, x: int = 0, y: int = 0, rel: str = "raised", highlight: int = 1):
        """添加圖片按鈕(按鈕名, 執行動作, 畫面名, 圖片, 水平座標, 垂直座標, 三圍邊框效果, 焦點邊框厚度)"""
        button = tk.Button(
            self,
            image = img,
            command = CMD,
            relief =  rel,
            highlightthickness = highlight
        )
        self.Canva(canvas_name).create_window(x , y , window = button, tags= button_name)
        self.__button_dict[button_name] = button

    def txt_button(self, button_name: str, CMD  ,canvas_name: str = None,  txt: str = None, w: int= 0, h: int= 0, x: int = 0, y: int = 0, size: int = 12, font_color: str = "black", bg_color: str = "white"):
        """添加粗體文字按鈕(按鈕名, 執行動作, 畫面名, 文字, 按鈕寬度, 按鈕高度, 水平位置, 垂直位置, 文字大小, 文字顏色, 背景顏色)"""
        button = tk.Button(
            self,
            text = txt ,
            command = CMD,
            font = ("Arial", size, "bold"),
            fg = font_color,
            bg = bg_color
        )
        # 按钮的像素大小&位置
        button.place(width=w, height=h)
        self.Canva(canvas_name).create_window(x , y , window = button, tags= button_name)
        self.__button_dict[button_name] = button

    def delete_button(self, button_name: str):
        """刪除按鈕"""
        self.Button(button_name).destroy()

    def input_box(self, canvas_name: str = None, entry_name: str= None,txt: str ="",x: int = 0, y: int = 0, size: int = 16, width: int = 12) :
        """文字輸入盒(畫面名, 輸入盒名稱, 提示文字,水平座標,垂直座標,文字大小,寬度)"""
        entry = tk.Entry(self, width = width, font=("Arial", size))
        entry.insert(0, txt) 
        self.Canva(canvas_name).create_window(x, y, window = entry)
        self.__entry_dict[entry_name] = entry

    def get_input(self, entry_name: str= None):
        """獲取文字輸入盒內容"""
        return self.Entry(entry_name).get().strip() #去除字串前後空白
        
    
    def reset_input_box(self, entry_name: str= None, content: str = ""):
        """重新載入輸入盒內容"""
        self.Entry(entry_name).delete(0, "end")
        self.Entry(entry_name).insert(0, content)
    
    def open_file(self) -> str:
        """開啟檔案(回傳檔案路徑)"""
        return filedialog.askopenfilename()

class Window(tk.Tk, BaseWindow):
    def __init__(self, title: str = None, width: int = 300, height: int = 300):
        """主視窗類別 (視窗名稱, 寬, 高)"""
        tk.Tk.__init__(self)  # 初始化 tk.Tk
        BaseWindow.__init__(self, title, width, height)  # 初始化 BaseWindow
        mixer.init() # 初始化音訊
        self.title(self.window_title)
        self.geometry(f"{self.width}x{self.height}")
        self.resizable(False, False) # 鎖定視窗大小
        
        self.temp_files = list() #臨時文件

        self.protocol("WM_DELETE_WINDOW", self.clean_temp) #綁定關閉視窗

    def clean_temp(self):
        """關閉視窗時刪除臨時 圖標 & 音訊文件"""
        logging.debug("正在關閉視窗")
        self.destroy()
        mixer.music.stop()
        mixer.quit() 
        if os.path.exists("temp_icon.ico"):
            os.remove("temp_icon.ico")
            logging.debug(f"已成功刪除臨時文件: temp_icon.ico")
        
        for temp_file in self.temp_files:
            if os.path.exists(temp_file):
                try:
                    os.remove(temp_file)
                    logging.debug(f"已成功刪除臨時文件: {temp_file}")
                except Exception as e:
                    logging.error(f"無法刪除臨時文件: {temp_file}, 原因: {e}")

    def save_icon_use(self, image_dict: dict, name: str):
        """創建、保存並使用臨時圖標《temp_icon.ico》"""
        icon_data = base64.b64decode(image_dict[name])
        with open("temp_icon.ico", "wb") as icon_file:
            icon_file.write(icon_data)
        self.iconbitmap("temp_icon.ico") #視窗圖標.ico

class SubWindow(tk.Toplevel, BaseWindow):
    """子視窗類"""
    def __init__(self, master :tk.Tk = None, title: str = None, width: int = 300, height: int = 300, BG_pic: ImageTk.PhotoImage = None):
        """子視窗類別 (父視窗, 子視窗名稱, 寬, 高)"""
        tk.Toplevel.__init__(self, master)  # 初始化 tk.Toplevel
        BaseWindow.__init__(self, title, width, height)  # 初始化 BaseWindow
        self.master = master
        self.iconbitmap(self.master.iconbitmap())
        
        self.title(self.master.title())
        if title is not None:
            self.title(title)

        self.geometry(f"{self.width}x{self.height}")
        self.resizable(False, False)  # 鎖定視窗大小

        self.setup_frame_and_canvas("Main", BG_pic)
        self.first_window("Main")
    
    def load_picture(self, img: ImageTk.PhotoImage = None, x: int = 0, y: int = 0 , tg: str = ""):
        """加載新的圖片並放在CANVA上 (照片, 水平座標, 垂直座標, 標記)"""
        super().load_picture("Main", img, x, y, tg)
    
    def add_text(self, txt: str = "", x: int = 0, y: int = 0, size: int = 12, color: str = "white" , tg: str = "", align: str = "center"):
        """添加粗體文字(文字, 水平位置, 垂直位置, 大小, 顏色, 標記, 對齊方式[東南西北])"""
        super().add_text("Main", txt, x, y, size, color, tg, align)

    def update_by_tag(self, tg: str = "", new_item: Union[str, ImageTk.PhotoImage, None] = None) -> None:
        """根據標記(tag)更換 CANVA 上的 物件 (標記, 新物件)"""
        super().update_by_tag("Main", tg, new_item)

    def delete_canvas_tag(self, tg: str = ""):
        """根據標記刪除CANVA上的物件 (標記)"""
        super().delete_canvas_tag("Main", tg)

    def message_text(self,ms: int = 1000, txt: str = "", x: int = 0, y: int = 0, size: int = 12, color: str = "white" , align: str = "center"):
        """顯示短暫訊息文字(ms毫秒: 預設 1000)"""
        self.add_text(txt, x, y, size, color, "msg", align)
        self.master.after(ms, lambda:self.delete_canvas_tag("msg"))

    def image_button(self, button_name: str, CMD, img: ImageTk.PhotoImage = None, x: int = 0, y: int = 0, rel: str = "raised", highlight: int = 1):
        super().image_button(button_name, CMD, "Main", img, x, y, rel, highlight)
    
    def txt_button(self, button_name: str, CMD, txt: str = None, w: int= 0, h: int= 0, x: int = 0, y: int = 0, size: int = 12, font_color: str = "black", bg_color: str = "white"):
        super().txt_button(button_name, CMD, "Main", txt, w, h, x, y, size, font_color, bg_color)

    def input_box(self, entry_name: str= None, txt: str = "", x: int = 0, y: int = 0, size: int = 16, width: int = 12):
        super().input_box("Main", entry_name, txt, x, y, size, width)

    def setup_subwindow(self, window_name: str = None,  width: int = 300, height: int= 300, BG_pic: ImageTk.PhotoImage = None):
        """建立子視窗(視窗, 寬, 高)"""
        sw = SubWindow(self, window_name, width, height, BG_pic)
        self.__subwindow_dict[window_name] = sw

class Picture:
    @staticmethod
    def process_image_base64(image_dict: dict, name: str, width: int= 0, height: int= 0):
        """處理成TK可識別的圖 (圖像字典, 名稱, 長, 寬)"""
        if name in image_dict:
            decode_pic = base64.b64decode(image_dict[name])
            pic = Image.open(BytesIO(decode_pic))
            pic = pic.resize((width, height) , Image.LANCZOS)  # 調整圖片大小
            picture = ImageTk.PhotoImage(pic)
            return picture
        else :
            raise KeyError(f"無法從 image_dict 找到名為 {name} 的圖片")

class Audio:
    def __init__(self):
        self.bgm_playing = False
        self.sound_dict = dict()
        self.music_dict = dict()
        self.temp_files = list() #要與 Windows.temp_files 做連結
    
    def Sound(self, sound_name: str= None) -> mixer.Sound:
        """使用 Pygame.mixer.Sound 相關操作"""
        return self.sound_dict[sound_name]

    def play_music(self, music_name: str = None, volume: float = 1, loops: int = -1):
        """播放音樂"""
        mixer.music.load(self.music_dict[music_name]) # 背景音樂文件
        mixer.music.set_volume(volume)
        mixer.music.play(loops) # -1 參數表示循環播放
        self.bgm_playing = True

    def stop_music(self):
        """停止當前音樂"""
        mixer.music.stop()
        self.bgm_playing = False

    def switch_music(self, music_name: str = None, game_running = True) :
        """切換音樂"""
        if self.bgm_playing:
            self.stop_music()
            if game_running:
                self.play_music(music_name)

    def play_sound(self, sound_name: str= None, volume: float = 1):
        """播放音效(Sound音訊, 音量)"""
        sound = self.Sound(sound_name)
        sound.set_volume(volume)
        sound.play()  # 播放音效

    def decode_sound(self, wav_dict: dict, *names):
        """解碼音效"""
        # 解碼 base64 音頻數據
        for name in names:
            binary_data = base64.b64decode(wav_dict[name])
            # 將二進制數據讀取到 BytesIO 中
            audio_data = BytesIO(binary_data)

            # 讀取 WAV 數據
            with wave.open(audio_data, 'rb') as wav_file:
                params = wav_file.getparams()
                frames = wav_file.readframes(params.nframes)

            # 創建一個 Sound 對象
            sound = mixer.Sound(buffer=frames)
            self.sound_dict[name] = sound
            

    def decode_music(self,  wav_dict: dict, *names):
        """解碼音樂"""
        for name in names:
            try:
                # 解碼 base64 音頻數據
                binary_data = base64.b64decode(wav_dict[name])
                # 將二進制數據讀取到 BytesIO 中
                audio_data = BytesIO(binary_data)

                # 讀取 WAV 數據
                with wave.open(audio_data, 'rb') as wav_file:
                    params = wav_file.getparams()
                    frames = wav_file.readframes(params.nframes)

                # 轉換為臨時音訊文件
                with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_file:
                    with wave.open(temp_file.name, 'wb') as temp_wav_file:
                            temp_wav_file.setparams(params)
                            temp_wav_file.writeframes(frames)
                            temp_filename = temp_file.name
                            self.temp_files.append(temp_filename)
                    
                # 儲存臨時文件名
                logging.debug(f"成功創建臨時文件: {temp_filename}")
                self.music_dict[name] = temp_filename
            except Exception as e:
               logging.error(f"音樂解碼失敗 ({name}): {e}")
    #endregion

@.\src\element.py
from GUI import Picture, Audio 
from src.imageb64 import image_dict
from src.soundb64 import wav_dict
try:
    music = Audio()
    music.decode_music(wav_dict, "bgm", "SuperMusic", "GreenMusic", "KachuMusic")
    music.decode_sound(wav_dict, "Ding", "SuperUP", 'GreenUP')

    BG = Picture.process_image_base64(image_dict, "BG", 450, 800)
    SuperCircle = Picture.process_image_base64(image_dict, "SuperCircle", 350, 350)
    Title = Picture.process_image_base64(image_dict, "Title", 450, 253)
    QST = Picture.process_image_base64(image_dict, "QST", 150, 200)

    back = Picture.process_image_base64(image_dict, "back", 30, 30)
    BeginPIC = Picture.process_image_base64(image_dict, "BeginPIC", 150, 50)
    AgainPIC = Picture.process_image_base64(image_dict,'AgainPIC' , 150 , 50)
    SB = Picture.process_image_base64(image_dict,'SB' , 450 , 169) #分數計算方式面板

    Gss = Picture.process_image_base64(image_dict, "Gss", 150, 200)
    Hhh = Picture.process_image_base64(image_dict, "Hhh", 150, 200)
    Hentai = Picture.process_image_base64(image_dict, "Hentai", 150, 200)
    Handsun = Picture.process_image_base64(image_dict, "Handsun", 150, 200)
    Kachu = Picture.process_image_base64(image_dict, "Kachu", 150, 200)
    Rrr = Picture.process_image_base64(image_dict, "RRR", 150, 200)

    #region 超級阿禾區
    SuperBG = Picture.process_image_base64(image_dict,'SuperBG' , 450 , 800)
    SuperTitle = Picture.process_image_base64(image_dict,'SuperTitle' , 450 , 253)
    SuperQST = Picture.process_image_base64(image_dict,"SuperQST" , 150 , 200)
    SuperPOP = Picture.process_image_base64(image_dict,'SuperPOP' , 450 , 800)
    super_hhh = Picture.process_image_base64(image_dict,'super_hhh' , 150 , 200)
    #endregion

    #region 綠光阿瑋區
    GreenBG = Picture.process_image_base64(image_dict,'GreenBG' , 450 , 800)
    GreenTitle = Picture.process_image_base64(image_dict,'GreenTitle' , 450 , 253)
    GreenQST = Picture.process_image_base64(image_dict,"GreenQST" , 150 , 200)
    GreenPOP = Picture.process_image_base64(image_dict,'GreenPOP' , 450 , 800)
    
    GreenLeft = Picture.process_image_base64(image_dict,'GreenLeft' , 150 , 200)
    GreenMid = Picture.process_image_base64(image_dict,'GreenMid' , 150 , 200)
    GreenRight = Picture.process_image_base64(image_dict,'GreenRight' , 150 , 200)

    green_wei = Picture.process_image_base64(image_dict,'green_wei' , 150 , 200)

    #endregion
    #region 皮卡丘充電區
    KachuBG = Picture.process_image_base64(image_dict,'KachuBG' , 450 , 800)
    KachuTitle = Picture.process_image_base64(image_dict,'KachuTitle' , 450 , 253)
    KachuQST = Picture.process_image_base64(image_dict,"KachuQST" , 150 , 200)
    KachuPOP = Picture.process_image_base64(image_dict,'KachuPOP' , 450 , 800)
    pikachu = Picture.process_image_base64(image_dict,'pikachu' , 150 , 200)
    
    #endregion
except Exception as e:
    print(e)

@.\src\Game.py
try:
    from src.LaBaG import P, LaBaG
except ModuleNotFoundError:
    from LaBaG import P, LaBaG

class PlayLaBaG(LaBaG):
    def __init__(self):
        super().__init__()
        self.Name = ""
        self.history_score = 0

        self.double_score = 0 #超級阿禾加倍分

    def Reset(self):
        super().Reset()
        self.history_score = 0

    def Logic(self):
        self.ModtoScreen = False
        self.OneData = dict()
        self.margin_score = 0
        self.double_score  = 0
        self.Random() 
        self.CalculateScore()
        self.Result()
        self.JudgeMode()

    def Random(self):
        """隨機生成數字"""
        super().Random()
        print(f"超級阿禾隨機數為: {self.SuperNum}")
        print(f"綠光阿瑋隨機數為: {self.GreenNum}")
        print(f"咖波累積數：{self.GssNum}")


    def CalculateScore(self):
        """計算分數"""
        super().CalculateScore()
        print(f"加分倍數: {self.score_time}")

    def Result(self):
        """結果"""
        super().Result()
        print(f"")
        print(f' | {self.Ps[0].code} | {self.Ps[1].code} | {self.Ps[2].code} |')
        print(f"+{self.margin_score}")
        print(f"目前分數：{self.score}")
        print(f"剩餘次數：{self.times - self.played}")

    # def JudgeMode(self):
    #     super().JudgeMode()
    #     match self.NowMode():
    #         case "SuperHHH":
    #             if self.ModtoScreen:
    #                 print(f"超級阿禾出現")
    #                 if self.double_score != 0:
    #                         print(f"(超級阿禾加倍分:{self.double_score})")
    #             else:
    #                 if all(p.code == "B" for p in self.Ps):
    #                     print("全阿禾，次數不消耗且+1！")
    #             print(f"超級阿禾剩餘次數:{self.SuperTimes}次")
    #         case "GreenWei":
    #             if self.ModtoScreen:
    #                 print(f"綠光阿瑋出現")
    #             else:
    #                 if all(p.code == "A" for p in self.Ps):
    #                     print("全咖波，次數不消耗！")
    #             print(f"綠光阿瑋剩餘次數:{self.GreenTimes}次")
                
    #         case "PiKaChu":
    #             if self.ModtoScreen:
    #                 print(f"皮卡丘為你充電")
    #                 print(f"已觸發 {self.kachu_times} 次皮卡丘充電")
    def JudgeMode(self):
        """判斷模式"""
        if not self.GameRunning():
            #關掉其他模式
            self.SuperHHH = False
            self.GreenWei = False

            #判斷皮卡丘充電
            if any(p.code == "E" for p in self.Ps) :
                self.PiKaChu = True
                self.played -= 5
                self.kachu_times += 1
                print(f"皮卡丘為你充電")
                print(f"已觸發 {self.kachu_times} 次皮卡丘充電")
                self.ModtoScreen = True
            else:
                self.PiKaChu = False
            return
        
        match self.NowMode():
            case "Normal" | "PiKaChu":
                #判斷超級阿禾
                hhh_appear = any(p.code == "B" for p in self.Ps) #判斷是否有任何阿禾
                if self.SuperNum <= self.SuperRate and hhh_appear:
                    self.SuperHHH = True
                    self.SuperTimes += 6
                    print(f"超級阿禾出現")
                    if self.PiKaChu:
                        self.PiKaChu = False

                    self.ModtoScreen = True

                    #超級阿禾加倍
                    if all(p.code == "B" for p in self.Ps):
                        self.double_score = int(round(self.score / 2)) * self.score_time
                        self.score += self.double_score
                        if self.score_time == 3:
                            print(f"(超級阿禾 x 綠光阿瑋加倍分:{self.double_score})")
                        else:
                            print(f"(超級阿禾加倍分:{self.double_score})")
                    return
                    
                
                #判斷綠光阿瑋
                gss_all = all(p.code == "A" for p in self.Ps) #判斷是否有出現並全部咖波
                if self.GreenNum <= self.GreenRate and gss_all :
                    self.GreenWei = True
                    self.GreenTimes += 2
                    print(f"綠光阿瑋出現")
                    if self.PiKaChu:
                        self.PiKaChu = False
                    
                    self.ModtoScreen = True
                    return

                elif self.GssNum >= 20 : #咖波累積數達到20
                    self.GreenWei = True
                    self.GreenTimes += 2
                    print(f"綠光阿瑋出現")
                    self.GssNum = 0
                    if self.PiKaChu:
                        self.PiKaChu = False
                    
                    self.ModtoScreen = True
                    return
            case "SuperHHH":
                self.SuperTimes -= 1
                if all(p.code == "B" for p in self.Ps):
                    self.SuperTimes += 2
                    print("全阿禾，次數不消耗且+1！")
                print(f"超級阿禾剩餘次數:{self.SuperTimes}次")

                if self.SuperTimes <= 0 : #超級阿禾次數用完
                    self.SuperHHH = False
                    self.JudgeMode() #判斷是否可再進入特殊模式
                    self.ModtoScreen = True

                return
            
            case "GreenWei":
                self.GreenTimes -= 1
                if all(p.code == "A" for p in self.Ps):
                    self.GreenTimes += 1
                    print("全咖波，次數不消耗！")
                print(f"綠光阿瑋剩餘次數:{self.GreenTimes}次")
                
                if self.GreenTimes <= 0 : #綠光阿瑋次數用完
                    self.GreenWei = False
                    self.JudgeMode() #判斷是否可再進入特殊模式
                    self.ModtoScreen = True
                
                return
        
    def GameOver(self):
        """遊戲結束"""
        print("")
        print(f"遊戲已結束，最終分數為：{self.score}。")
        if self.score > self.history_score:
            self.history_score = self.score

#region JsonLaBaG
import json
from random import randint

class JsonLaBaG(PlayLaBaG):
    """與json檔案連接的啦八機"""
    def __init__(self):
        super().__init__()
        self.json_data = dict()
        self.index = "1" # 第 n 次的索引
        

    def Reset(self):
        """重置"""
        self.played = 0
        self.score = 0
        self.margin_score= 0
        self.Ps = [None, None, None]
        
        self.SuperHHH = False
        self.SuperTimes = 0

        self.GreenWei = False
        self.GreenTimes = 0
        self.GssNum = 0

        self.PiKaChu = False
        self.kachu_times = 0

        self.BeginAble = True
        self.index = "1" # 第 n 次的索引


    def setup_path(self, jsondata_path: str = None):
        """設置檔案路徑"""
        with open(jsondata_path, "r", encoding="utf-8") as json_file:
            self.json_data = json.load(json_file)
            print(f"已設置路徑為：{jsondata_path}")
    
    def index_plus(self):
        """索引值 +1"""
        self.index = str(int(self.index) + 1)

    def Random(self):
        """遊戲變數隨機產生"""
        if self.index in self.json_data:
            RandNums = [self.json_data[self.index]["RandNums[0]"], self.json_data[self.index]["RandNums[1]"], self.json_data[self.index]["RandNums[2]"]]
            self.SuperNum = self.json_data[self.index]["SuperHHH"]
            self.GreenNum = self.json_data[self.index]["GreenWei"]
        else:
            RandNums = [randint(1, 100), randint(1, 100), randint(1, 100)]
            self.SuperNum = randint(1, 100) 
            self.GreenNum = randint(1, 100) 

        print(f"P隨機數為：{RandNums[0]} | {RandNums[1]} | {RandNums[2]}")
        print(f"超級阿禾隨機數為: {self.SuperNum}")
        print(f"綠光阿瑋隨機數為: {self.GreenNum}")


        def acc_rate():
            res = list()
            acc = 0
            for i in P.Dict:
                acc += P.Dict[i].rate_dict[self.NowMode()]
                res.append(acc)
            return res
        
        rate_range = acc_rate()
        print("機率區間：", rate_range)

        for i in range(3):
            if RandNums[i] <= rate_range[0]:
                self.Ps[i] = P.Dict["A"]
            elif RandNums[i] <= rate_range[1]:
                self.Ps[i] = P.Dict["B"]
            elif RandNums[i] <= rate_range[2]:
                self.Ps[i] = P.Dict["C"]
            elif RandNums[i] <= rate_range[3]:
                self.Ps[i] = P.Dict["D"]
            elif RandNums[i] <= rate_range[4]:
                self.Ps[i] = P.Dict["E"]
            elif RandNums[i] <= rate_range[5]:
                self.Ps[i] = P.Dict["F"]

        #增加咖波累積數
        for p in self.Ps:
            if p.code == "A" and self.GssNum < 20 :
                self.GssNum += 1
        print(f"咖波累積數：{self.GssNum}")

    def Result(self):
        """結果"""
        self.index_plus()
        self.played += 1
        self.score += self.margin_score
        print(f"")
        print(f' | {self.Ps[0].code} | {self.Ps[1].code} | {self.Ps[2].code} |')
        print(f"+{self.margin_score}")
        print(f"目前分數：{self.score}")
        print(f"剩餘次數：{self.times - self.played}")
#endregion

if __name__ == "__main__":
    Game = PlayLaBaG()
    while Game.GameRunning():
        while True:
            if input("請按下ENTER") == "":
                break
        Game.Logic()
    Game.GameOver()
        

@.\src\LaBaG.py
from random import randint

class P:
    """圖案符號"""
    Dict = dict()

    def __init__(self, code: str = None, score_list: list[int] = None, rate_dict: dict[str, int]= None):
        self.code = code
        self.score_list = score_list or []
        self.rate_dict = rate_dict or {"Normal": 0}
        
        self.AddDict()

    def AddDict(self):
        """加入類字典中"""
        if self.code not in P.Dict:
            P.Dict[self.code] = self

        
class LaBaG:
    def __init__(self):
        self.AllData = dict() #總資料
        self.OneData = dict() #單次資料
        self.DataIndex = 0

        # 遊戲邏輯變數
        self.times = 30 #可遊玩次數 正常30
        self.played = 0 #已遊玩次數

        self.score = 0
        self.margin_score= 0

        self.Ps = [None, None, None]
        P("A",[625, 350, 150], {
                "Normal": 36,
                "SuperHHH": 19,
                "GreenWei": 36,
                "PiKaChu": 36
            })
        
        P("B",[1250, 650, 220], {
                "Normal": 24,
                "SuperHHH": 5,
                "GreenWei": 24,
                "PiKaChu": 24
            })
        
        P("C",[2100, 1080, 380], {
                "Normal": 17,
                "SuperHHH": 19,
                "GreenWei": 17,
                "PiKaChu": 17
            })
        
        P("D",[2500, 1250, 420], {
                "Normal": 12,
                "SuperHHH": 19,
                "GreenWei": 12,
                "PiKaChu": 12
            })
        
        P("E",[10000, 5000, 1250], {
                "Normal": 8,
                "SuperHHH": 19,
                "GreenWei": 8,
                "PiKaChu": 8
            })
        
        P("F",[20000, 10000, 2500], {
                "Normal": 3,
                "SuperHHH": 19,
                "GreenWei": 3,
                "PiKaChu": 3
            })
        
        #加分倍數
        self.score_times_dict = {
            "Normal": 1,
            "SuperHHH": 1,
            "GreenWei": 3,
            "PiKaChu": 1
        }
        self.score_time = 1

        #region 特殊模式
        self.ModtoScreen = False #模式影響畫面
        #超級阿禾
        self.SuperRate = 15
        self.SuperHHH = False
        self.SuperNum = 0
        self.SuperTimes = 0
        self.double_score = 0 #超級阿禾加倍分

        #綠光阿瑋
        self.GreenRate = 35
        self.GreenWei = False
        self.GreenNum = 0
        self.GreenTimes = 0
        self.GssNum = 0 #咖波累積數

        #皮卡丘
        self.PiKaChu = False
        self.kachu_times = 0

        #endregion

    def Reset(self):
        """重置"""
        self.AllData = dict()
        self.DataIndex = 0

        self.played = 0
        self.score = 0
        self.margin_score= 0
        self.score_time = 1
        self.Ps = [None, None, None]
        
        self.SuperHHH = False
        self.SuperTimes = 0

        self.GreenWei = False
        self.GreenTimes = 0
        self.GssNum = 0

        self.PiKaChu = False
        self.kachu_times = 0

    def Logic(self):
        """邏輯流程"""
        self.Reset()
        while self.GameRunning():
            self.ModtoScreen = False
            self.OneData = dict()

            self.margin_score = 0
            self.double_score  = 0
            self.Random() 
            self.CalculateScore()
            self.Result()
            self.JudgeMode()        
    
    def GameRunning(self) -> bool:
        """判斷一局遊戲是否繼續運行"""
        return self.played < self.times

    def NowMode(self)  -> str:
        """現在模式"""
        modes = {
            self.SuperHHH: "SuperHHH",
            self.GreenWei: "GreenWei",
            self.PiKaChu: "PiKaChu"
        }
        return modes.get(True, "Normal")
        

    def Random(self):
        """遊戲變數隨機產生"""
        RandNums = [randint(1, 100), randint(1, 100), randint(1, 100)]
        for i in range(3):
            self.OneData[f"RandNums[{i}]"] = RandNums[i]

        self.SuperNum = randint(1, 100) 
        self.OneData["SuperHHH"] = self.SuperNum
        self.GreenNum = randint(1, 100) 
        self.OneData["GreenWei"] = self.GreenNum

        def acc_rate():
            res = list()
            acc = 0
            for i in P.Dict:
                acc += P.Dict[i].rate_dict[self.NowMode()]
                res.append(acc)
            return res
        
        rate_range = acc_rate()

        for i in range(3):
            if RandNums[i] <= rate_range[0]:
                self.Ps[i] = P.Dict["A"]
            elif RandNums[i] <= rate_range[1]:
                self.Ps[i] = P.Dict["B"]
            elif RandNums[i] <= rate_range[2]:
                self.Ps[i] = P.Dict["C"]
            elif RandNums[i] <= rate_range[3]:
                self.Ps[i] = P.Dict["D"]
            elif RandNums[i] <= rate_range[4]:
                self.Ps[i] = P.Dict["E"]
            elif RandNums[i] <= rate_range[5]:
                self.Ps[i] = P.Dict["F"]

        #增加咖波累積數
        for p in self.Ps:
            if p.code == "A" and self.GssNum < 20 :
                self.GssNum += 1
        
    def CalculateScore(self):
        """計算分數"""
        def margin_add(p: P, typ: int):
            """p -> 使用 p 的分數列表\ntyp -> 得分型態"""
            self.margin_score += p.score_list[typ]

        if self.Ps[0] == self.Ps[1] == self.Ps[2]:
            margin_add(self.Ps[0], 0)
        elif self.Ps[0] == self.Ps[1]:
            margin_add(self.Ps[0], 1)
            margin_add(self.Ps[2], 2)
            self.margin_score = round(self.margin_score / 1.3)
        elif self.Ps[1] == self.Ps[2]:
            margin_add(self.Ps[1], 1)
            margin_add(self.Ps[0], 2)
            self.margin_score = round(self.margin_score / 1.3)
        elif self.Ps[2] == self.Ps[0]:
            margin_add(self.Ps[2], 1)
            margin_add(self.Ps[1], 2)
            self.margin_score = round(self.margin_score / 1.3)  
        elif self.Ps[0] != self.Ps[1] != self.Ps[2]:
            margin_add(self.Ps[0], 2)
            margin_add(self.Ps[1], 2)
            margin_add(self.Ps[2], 2)
            self.margin_score = round(self.margin_score / 3)

        self.score_time = self.score_times_dict[self.NowMode()]
        self.margin_score *= self.score_time
        

    def Result(self):
        """結果"""
        self.played += 1
        self.DataIndex += 1
        self.score += self.margin_score
        self.AllData[f"{self.DataIndex}"] = self.OneData
                    
    def JudgeMode(self):
        """判斷模式"""
        if not self.GameRunning():
            #關掉其他模式
            self.SuperHHH = False
            self.GreenWei = False

            #判斷皮卡丘充電
            if any(p.code == "E" for p in self.Ps) :
                self.PiKaChu = True
                self.played -= 5
                self.kachu_times += 1
                self.ModtoScreen = True
            else:
                self.PiKaChu = False
            return
        
        
        
        match self.NowMode():
            case "Normal" | "PiKaChu":
                #判斷超級阿禾
                hhh_appear = any(p.code == "B" for p in self.Ps) #判斷是否有任何阿禾
                if self.SuperNum <= self.SuperRate and hhh_appear:
                    self.SuperHHH = True
                    self.SuperTimes += 6
                    if self.PiKaChu:
                        self.PiKaChu = False

                    self.ModtoScreen = True

                    #超級阿禾加倍
                    if all(p.code == "B" for p in self.Ps):
                        self.double_score = int(round(self.score / 2)) * self.score_time
                        self.score += self.double_score
                    return
                
                #判斷綠光阿瑋
                gss_all = all(p.code == "A" for p in self.Ps) #判斷是否有出現並全部咖波
                if self.GreenNum <= self.GreenRate and gss_all :
                    self.GreenWei = True
                    self.GreenTimes += 2
                    if self.PiKaChu:
                        self.PiKaChu = False
                    
                    self.ModtoScreen = True
                    return

                elif self.GssNum >= 20 : #咖波累積數達到20
                    self.GreenWei = True
                    self.GreenTimes += 2
                    self.GssNum = 0
                    if self.PiKaChu:
                        self.PiKaChu = False
                    
                    self.ModtoScreen = True
                    return
            case "SuperHHH":
                self.SuperTimes -= 1

                if all(p.code == "B" for p in self.Ps):
                    self.SuperTimes += 2
                if self.SuperTimes <= 0 : #超級阿禾次數用完
                    self.SuperHHH = False
                    self.JudgeMode() #判斷是否可再進入特殊模式
                    self.ModtoScreen = True

                return
            
            case "GreenWei":
                self.GreenTimes -= 1
                if all(p.code == "A" for p in self.Ps):
                    self.GreenTimes += 1
                if self.GreenTimes <= 0 : #綠光阿瑋次數用完
                    self.GreenWei = False
                    self.JudgeMode() #判斷是否可再進入特殊模式
                    self.ModtoScreen = True
                
                return
            
if __name__ == "__main__":
    Game = LaBaG()
    Game.Logic()
    print(Game.score)

@.\src\Sheet.py
#https://script.google.com/macros/s/AKfycbzWA0mMx_B14vrHGW6-QK4tOClSIj1lw7udLJwp7XCg2nZ8hDxt7d-dqnc6WenqBM8FBA/exec

import requests 

class Sheet:
    RawData = list()
    SortedData = dict()
    
    @classmethod
    def GetData(cls):
        """獲取資料"""
        url = "https://script.google.com/macros/s/AKfycbzWA0mMx_B14vrHGW6-QK4tOClSIj1lw7udLJwp7XCg2nZ8hDxt7d-dqnc6WenqBM8FBA/exec"
        cls.RawData.clear()
        try:
            cls.RawData = requests.get(url).json()
        except Exception as e:
            print(f"錯誤：{e}")
            exit(1)
        cls.SortRawData()

    @classmethod
    def SortRawData(cls):
        """分類整理資料"""
        if cls.RawData:
            del cls.RawData[0] #刪除原始資料的第一個索引 (試算表的欄位名稱)
        for row in cls.RawData : #對每一個的資料(試算表的列位)
            if row:
                del row[0]  #先刪除第一欄的"時間戳記"
                #剩下的資料 [名稱, 分數]
                if row[0] and row[1]: #皆唯「有效的值」
                    name = str(row[0]) #將名稱那格變為字串型態
                    score = int(row[1]) #將分數那格變為整數型態
                    cls.SortedData[name] = max(cls.SortedData.get(name, 0), score) # 原分數與新分數取最大 如果還沒有資料則原分數為0
                    
        print("\n".join([f"{name}: {score}" for name, score in cls.SortedData.items()]))
                    
    @classmethod
    def CommitScore(cls, name: str= None, score: int= 0):
        """提交分數"""
        if name: # 檢查是否是「有效的值」
            if isinstance(score, int) and score >= 0:  # 檢查是否為正整數
                url = f"https://docs.google.com/forms/d/18dVGtPExBUc0p1VbsmMxCyujQoldI6GKQWZQGJQ-yzY/formResponse?entry.582969025={name}&entry.995493130={score}"
                web = requests.get(url)
                if web.status_code == 200:
                    cls.SortedData[name] = max(cls.SortedData.get(name, 0), score)
                    print("資料已上傳")
                else:
                        print(f"錯誤：HTTP狀態碼 {web.status_code}")
            else:
                print("分數無效，必須為正整數！")
        else:
                print("名稱為空，資料未上傳！")

    @classmethod 
    def GetScore(cls, name: str= None):
        """名稱取得分數"""
        if name: # 檢查是否是「有效的值」
            return cls.SortedData.get(name, 0)
        print("名稱無效！")
        return 0
    
    @classmethod
    def RankedData(cls):
        """按分數排名過後的資料"""
        return dict(sorted(cls.SortedData.items(), key=lambda item: item[1], reverse=True)) #.items() 回傳 tuple(key, value)
        

if __name__ == "__main__":
    Sheet.GetData()
    Sheet.CommitScore("測試", Sheet.GetScore("測試"))


